{"version":3,"file":"kubevirt-dashboard-extension-1.3.1.umd.min.formatters.js","mappings":"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","sources":["webpack://kubevirt-dashboard-extension-1.3.1/./formatters/IPAddress.vue","webpack://kubevirt-dashboard-extension-1.3.1/../../node_modules/@rancher/shell/components/CopyToClipboard.vue","webpack://kubevirt-dashboard-extension-1.3.1/../../node_modules/clipboard-polyfill/dist/es6/clipboard-polyfill.es6.js","webpack://kubevirt-dashboard-extension-1.3.1/../../node_modules/@rancher/shell/utils/clipboard.js","webpack://kubevirt-dashboard-extension-1.3.1/../../node_modules/@rancher/shell/components/CopyToClipboard.vue?5b16","webpack://kubevirt-dashboard-extension-1.3.1/./formatters/IPAddress.vue?ce01","webpack://kubevirt-dashboard-extension-1.3.1/./formatters/VMState.vue","webpack://kubevirt-dashboard-extension-1.3.1/./formatters/VMState.vue?102c","webpack://kubevirt-dashboard-extension-1.3.1/./formatters/VMState.vue?7efe","webpack://kubevirt-dashboard-extension-1.3.1/./formatters/VMState.vue?79c3"],"sourcesContent":["<script>\nimport CopyToClipboard from '@shell/components/CopyToClipboard';\n// import { get } from '@shell/utils/object';\nimport { isIpv4 } from '@shell/utils/string';\n// import { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\n// import { HCI } from '../types';\nimport { VMI_RESOURCE_NAME } from '../constants';\nimport { OFF } from '../harvester/models/kubevirt.io.virtualmachine';\n\nconst MANAGEMENT_NETWORK = 'Management Network';\n\nexport default {\n  components: { CopyToClipboard },\n  props: {\n    value: {\n      type: String,\n      default: '',\n    },\n    row: {\n      type: Object,\n      required: true,\n    },\n    col: {\n      type: Object,\n      default(props) {\n        return {};\n      },\n    },\n  },\n\n  computed: {\n    // Return VM instance IP and VM annotation IP\n    ips() {\n      //   return [...this.vmiIp, ...this.networkAnnotationIP]\n      return this.vmiIp.filter(Boolean).sort((a, b) => (a.ip < b.ip ? -1 : 1));\n    },\n\n    // networkAnnotationIP() {\n    //   if (this.row.actualState !== 'Running') {\n    //     // TODO: Running\n    //     return [];\n    //   }\n\n    //   const annotationIp =\n    //     get(this.row, `metadata.annotations.\"${HCI_ANNOTATIONS.NETWORK_IPS}\"`) || '[]';\n\n    //   // Obtain IP from VM annotation, remove the CIDR suffix number if CIDR Exist\n    //   try {\n    //     const out = JSON.parse(annotationIp);\n\n    //     return out.map((ip) => ({\n    //       ip: ip.replace(/\\/[\\d\\D]*/, ''),\n    //       name: '',\n    //     }));\n    //   } catch (e) {\n    //     return [];\n    //   }\n    // },\n\n    vmiIp() {\n      const vmiResources = this.$store.getters['cluster/all'](VMI_RESOURCE_NAME);\n      const resource = vmiResources.find((VMI) => VMI.id === this.value) || null;\n      //   const networksName = this.row.networksName || [];\n      const vmiNetworks = resource?.spec?.networks || [];\n\n      return (resource?.status?.interfaces || [])\n        .filter((intf) => {\n          return isIpv4(intf.ipAddress); //&& networksName.includes(intf.name);\n        })\n        .map((intf) => {\n          let name;\n          const network = vmiNetworks.find((network) => network.name === intf.name);\n\n          if (network && network.multus) {\n            name = network.multus.networkName;\n          } else if (network && network.pod) {\n            name = MANAGEMENT_NETWORK;\n          }\n\n          return {\n            ip: intf.ipAddress,\n            name,\n          };\n        });\n    },\n\n    showIP() {\n      return this.row.stateDisplay !== OFF;\n    },\n  },\n};\n</script>\n\n<template>\n  <div v-if=\"showIP\">\n    <span v-for=\"{ ip, name } in ips\" :key=\"ip\">\n      <span v-clean-tooltip=\"name\">{{ ip }}</span>\n      <CopyToClipboard\n        :text=\"ip\"\n        label-as=\"tooltip\"\n        class=\"icon-btn\"\n        action-color=\"bg-transparent\"\n      />\n    </span>\n  </div>\n  <span v-else-if=\"col.dashIfEmpty\">\n    <span class=\"text-muted\">&mdash;</span>\n  </span>\n</template>\n","<script>\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { copyTextToClipboard } from '@shell/utils/clipboard';\n\nexport default {\n  components: { AsyncButton },\n\n  props: {\n    text: {\n      type:     String,\n      required: true,\n    },\n\n    showLabel: {\n      type:    Boolean,\n      default: true,\n    }\n  },\n\n  methods: {\n    clicked(buttonCb) {\n      copyTextToClipboard(this.text).then(() => {\n        buttonCb(true);\n      }).catch(() => {\n        buttonCb(false);\n      });\n    },\n  }\n};\n</script>\n\n<template>\n  <AsyncButton\n    icon=\"icon-copy\"\n    :show-label=\"showLabel\"\n    action-label=\"Copy\"\n    waiting-label=\"Copying...\"\n    success-label=\"Copied!\"\n    error-label=\"Error Copying\"\n    v-bind=\"$attrs\"\n    :delay=\"2000\"\n    @click=\"clicked\"\n  />\n</template>\n","// src/clipboard-polyfill/ClipboardItem/data-types.ts\nvar TEXT_PLAIN = \"text/plain\";\nvar TEXT_HTML = \"text/html\";\n\n// src/clipboard-polyfill/debug.ts\nvar debugLogImpl = (s) => {\n};\nfunction debugLog(s) {\n  debugLogImpl(s);\n}\nfunction setDebugLog(logFn) {\n  debugLogImpl = logFn;\n}\nvar showWarnings = true;\nfunction suppressWarnings() {\n  showWarnings = false;\n}\nfunction shouldShowWarnings() {\n  return showWarnings;\n}\nfunction warnOrLog() {\n  (console.warn || console.log).apply(console, arguments);\n}\nvar warn = warnOrLog.bind(\"[clipboard-polyfill]\");\n\n// src/clipboard-polyfill/builtins/window-globalThis.ts\nvar originalWindow = typeof window === \"undefined\" ? void 0 : window;\nvar originalGlobalThis = typeof globalThis === \"undefined\" ? void 0 : globalThis;\n\n// src/clipboard-polyfill/builtins/promise-constructor.ts\nvar _a, _b, _c;\nvar promiseConstructorImpl = (_c = (_a = originalWindow) == null ? void 0 : _a.Promise) != null ? _c : (_b = originalGlobalThis) == null ? void 0 : _b.Promise;\nfunction getPromiseConstructor() {\n  if (!promiseConstructorImpl) {\n    throw new Error(\n      \"No `Promise` implementation available for `clipboard-polyfill`. Consider using: https://github.com/lgarron/clipboard-polyfill#flat-file-version-with-promise-included\"\n    );\n  }\n  return promiseConstructorImpl;\n}\n\n// src/clipboard-polyfill/builtins/builtin-globals.ts\nvar originalNavigator = typeof navigator === \"undefined\" ? void 0 : navigator;\nvar originalNavigatorClipboard = originalNavigator == null ? void 0 : originalNavigator.clipboard;\nvar _a2;\nvar originalNavigatorClipboardRead = (_a2 = originalNavigatorClipboard == null ? void 0 : originalNavigatorClipboard.read) == null ? void 0 : _a2.bind(\n  originalNavigatorClipboard\n);\nvar _a3;\nvar originalNavigatorClipboardReadText = (_a3 = originalNavigatorClipboard == null ? void 0 : originalNavigatorClipboard.readText) == null ? void 0 : _a3.bind(\n  originalNavigatorClipboard\n);\nvar _a4;\nvar originalNavigatorClipboardWrite = (_a4 = originalNavigatorClipboard == null ? void 0 : originalNavigatorClipboard.write) == null ? void 0 : _a4.bind(\n  originalNavigatorClipboard\n);\nvar _a5;\nvar originalNavigatorClipboardWriteText = (_a5 = originalNavigatorClipboard == null ? void 0 : originalNavigatorClipboard.writeText) == null ? void 0 : _a5.bind(\n  originalNavigatorClipboard\n);\nvar _a6;\nvar originalWindowClipboardItem = (_a6 = originalWindow) == null ? void 0 : _a6.ClipboardItem;\nvar promiseConstructor = getPromiseConstructor();\n\n// src/clipboard-polyfill/strategies/internet-explorer.ts\nvar ieWindow = originalWindow;\nfunction seemToBeInIE() {\n  return typeof ClipboardEvent === \"undefined\" && typeof (ieWindow == null ? void 0 : ieWindow.clipboardData) !== \"undefined\" && typeof (ieWindow == null ? void 0 : ieWindow.clipboardData.setData) !== \"undefined\";\n}\nfunction writeTextIE(text) {\n  if (!ieWindow.clipboardData) {\n    return false;\n  }\n  var success = ieWindow.clipboardData.setData(\"Text\", text);\n  if (success) {\n    debugLog(\"writeTextIE worked\");\n  }\n  return success;\n}\nfunction readTextIE() {\n  if (!ieWindow.clipboardData) {\n    throw new Error(\"Cannot read IE clipboard Data \");\n  }\n  var text = ieWindow.clipboardData.getData(\"Text\");\n  if (text === \"\") {\n    throw new Error(\n      \"Empty clipboard or could not read plain text from clipboard\"\n    );\n  }\n  return text;\n}\n\n// src/clipboard-polyfill/strategies/dom.ts\nfunction copyListener(tracker, data, e) {\n  debugLog(\"listener called\");\n  tracker.success = true;\n  for (var type in data) {\n    var value = data[type];\n    var clipboardData = e.clipboardData;\n    clipboardData.setData(type, value);\n    if (type === TEXT_PLAIN && clipboardData.getData(type) !== value) {\n      debugLog(\"setting text/plain failed\");\n      tracker.success = false;\n    }\n  }\n  e.preventDefault();\n}\nfunction execCopy(data) {\n  var tracker = { success: false };\n  var listener = copyListener.bind(this, tracker, data);\n  document.addEventListener(\"copy\", listener);\n  try {\n    document.execCommand(\"copy\");\n  } finally {\n    document.removeEventListener(\"copy\", listener);\n  }\n  return tracker.success;\n}\nfunction copyUsingTempSelection(e, data) {\n  selectionSet(e);\n  var success = execCopy(data);\n  selectionClear();\n  return success;\n}\nfunction copyUsingTempElem(data) {\n  var tempElem = document.createElement(\"div\");\n  tempElem.setAttribute(\"style\", \"-webkit-user-select: text !important\");\n  tempElem.textContent = \"temporary element\";\n  document.body.appendChild(tempElem);\n  var success = copyUsingTempSelection(tempElem, data);\n  document.body.removeChild(tempElem);\n  return success;\n}\nfunction copyTextUsingDOM(str) {\n  debugLog(\"copyTextUsingDOM\");\n  var tempElem = document.createElement(\"div\");\n  tempElem.setAttribute(\"style\", \"-webkit-user-select: text !important\");\n  var spanParent = tempElem;\n  if (tempElem.attachShadow) {\n    debugLog(\"Using shadow DOM.\");\n    spanParent = tempElem.attachShadow({ mode: \"open\" });\n  }\n  var span = document.createElement(\"span\");\n  span.innerText = str;\n  spanParent.appendChild(span);\n  document.body.appendChild(tempElem);\n  selectionSet(span);\n  var result = document.execCommand(\"copy\");\n  selectionClear();\n  document.body.removeChild(tempElem);\n  return result;\n}\nfunction selectionSet(elem) {\n  var sel = document.getSelection();\n  if (sel) {\n    var range = document.createRange();\n    range.selectNodeContents(elem);\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n}\nfunction selectionClear() {\n  var sel = document.getSelection();\n  if (sel) {\n    sel.removeAllRanges();\n  }\n}\n\n// src/clipboard-polyfill/implementations/write-fallback.ts\nfunction writeFallback(stringItem) {\n  var hasTextPlain = TEXT_PLAIN in stringItem;\n  if (seemToBeInIE()) {\n    if (!hasTextPlain) {\n      throw new Error(\"No `text/plain` value was specified.\");\n    }\n    if (writeTextIE(stringItem[TEXT_PLAIN])) {\n      return true;\n    } else {\n      throw new Error(\"Copying failed, possibly because the user rejected it.\");\n    }\n  }\n  if (execCopy(stringItem)) {\n    debugLog(\"regular execCopy worked\");\n    return true;\n  }\n  if (navigator.userAgent.indexOf(\"Edge\") > -1) {\n    debugLog('UA \"Edge\" => assuming success');\n    return true;\n  }\n  if (copyUsingTempSelection(document.body, stringItem)) {\n    debugLog(\"copyUsingTempSelection worked\");\n    return true;\n  }\n  if (copyUsingTempElem(stringItem)) {\n    debugLog(\"copyUsingTempElem worked\");\n    return true;\n  }\n  if (copyTextUsingDOM(stringItem[TEXT_PLAIN])) {\n    debugLog(\"copyTextUsingDOM worked\");\n    return true;\n  }\n  return false;\n}\n\n// src/clipboard-polyfill/promise/promise-compat.ts\nfunction promiseRecordMap(keys, f) {\n  var promiseList = [];\n  for (var i in keys) {\n    var key = keys[i];\n    promiseList.push(f(key));\n  }\n  return promiseConstructor.all(promiseList).then((vList) => {\n    var dataOut = {};\n    for (var i2 = 0; i2 < keys.length; i2++) {\n      dataOut[keys[i2]] = vList[i2];\n    }\n    return dataOut;\n  });\n}\nvar voidPromise = promiseConstructor.resolve();\nvar truePromiseFn = () => promiseConstructor.resolve(true);\nvar falsePromise = promiseConstructor.resolve(false);\nfunction rejectThrownErrors(executor) {\n  return new promiseConstructor((resolve, reject) => {\n    try {\n      resolve(executor());\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n// src/clipboard-polyfill/implementations/text.ts\nfunction stringToStringItem(s) {\n  var stringItem = {};\n  stringItem[TEXT_PLAIN] = s;\n  return stringItem;\n}\nfunction writeText(s) {\n  return rejectThrownErrors(() => {\n    if (originalNavigatorClipboardWriteText) {\n      debugLog(\"Using `navigator.clipboard.writeText()`.\");\n      return originalNavigatorClipboardWriteText(s).catch(\n        writeTextStringFallback\n      );\n    }\n    return promiseConstructor.resolve(writeTextStringFallback(s));\n  });\n}\nfunction writeTextStringFallback(s) {\n  if (!writeFallback(stringToStringItem(s))) {\n    throw new Error(\"writeText() failed\");\n  }\n}\nfunction readText() {\n  return rejectThrownErrors(() => {\n    if (originalNavigatorClipboardReadText) {\n      debugLog(\"Using `navigator.clipboard.readText()`.\");\n      return originalNavigatorClipboardReadText();\n    }\n    if (seemToBeInIE()) {\n      var result = readTextIE();\n      return promiseConstructor.resolve(result);\n    }\n    throw new Error(\"Read is not supported in your browser.\");\n  });\n}\n\n// src/clipboard-polyfill/ClipboardItem/check.ts\nfunction hasItemWithType(clipboardItems, typeName) {\n  for (var i in clipboardItems) {\n    var item = clipboardItems[i];\n    if (item.types.indexOf(typeName) !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// src/clipboard-polyfill/ClipboardItem/ClipboardItemPolyfill.ts\nfunction ClipboardItemPolyfillImpl(items, options) {\n  var _a7;\n  var types = Object.keys(items);\n  var _items = {};\n  for (var type in items) {\n    var item = items[type];\n    if (typeof item === \"string\") {\n      _items[type] = stringToBlob(type, item);\n    } else {\n      _items[type] = item;\n    }\n  }\n  var presentationStyle = (_a7 = options == null ? void 0 : options.presentationStyle) != null ? _a7 : \"unspecified\";\n  function getType(type2) {\n    return promiseConstructor.resolve(_items[type2]);\n  }\n  return {\n    types,\n    presentationStyle,\n    getType\n  };\n}\nvar ClipboardItemPolyfill = ClipboardItemPolyfillImpl;\n\n// src/clipboard-polyfill/ClipboardItem/convert.ts\nfunction stringToBlob(type, str) {\n  return new Blob([str], {\n    type\n  });\n}\nfunction blobToString(blob) {\n  return new promiseConstructor((resolve, reject) => {\n    var fileReader = new FileReader();\n    fileReader.addEventListener(\"load\", () => {\n      var result = fileReader.result;\n      if (typeof result === \"string\") {\n        resolve(result);\n      } else {\n        reject(\"could not convert blob to string\");\n      }\n    });\n    fileReader.readAsText(blob);\n  });\n}\nfunction clipboardItemToGlobalClipboardItem(clipboardItem) {\n  return promiseRecordMap(clipboardItem.types, function(type) {\n    return clipboardItem.getType(type);\n  }).then((items) => {\n    return new Promise((resolve, reject) => {\n      var options = {};\n      if (clipboardItem.presentationStyle) {\n        options.presentationStyle = clipboardItem.presentationStyle;\n      }\n      if (originalWindowClipboardItem) {\n        resolve(new originalWindowClipboardItem(items, options));\n      } else {\n        reject(\"window.ClipboardItem is not defined\");\n      }\n    });\n  });\n}\nfunction textToClipboardItem(text) {\n  var items = {};\n  items[TEXT_PLAIN] = stringToBlob(text, TEXT_PLAIN);\n  return new ClipboardItemPolyfill(items);\n}\nfunction getTypeAsString(clipboardItem, type) {\n  return clipboardItem.getType(type).then((text) => {\n    return blobToString(text);\n  });\n}\nfunction toStringItem(data) {\n  return promiseRecordMap(data.types, function(type) {\n    return getTypeAsString(data, type);\n  });\n}\n\n// src/clipboard-polyfill/implementations/blob.ts\nfunction write(data) {\n  return rejectThrownErrors(() => {\n    if (originalNavigatorClipboardWrite && originalWindowClipboardItem) {\n      var originalNavigatorClipboardWriteCached = originalNavigatorClipboardWrite;\n      debugLog(\"Using `navigator.clipboard.write()`.\");\n      return promiseConstructor.all(data.map(clipboardItemToGlobalClipboardItem)).then(\n        (globalClipboardItems) => {\n          return originalNavigatorClipboardWriteCached(globalClipboardItems).then(truePromiseFn).catch((e) => {\n            if (!hasItemWithType(data, TEXT_PLAIN) && !hasItemWithType(data, TEXT_HTML)) {\n              throw e;\n            }\n            return falsePromise;\n          });\n        }\n      );\n    }\n    return falsePromise;\n  }).then((success) => {\n    if (success) {\n      return voidPromise;\n    }\n    var hasTextPlain = hasItemWithType(data, TEXT_PLAIN);\n    if (shouldShowWarnings() && !hasTextPlain) {\n      debugLog(\n        \"clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call suppressWarnings() to suppress this warning.\"\n      );\n    }\n    return toStringItem(data[0]).then((stringItem) => {\n      if (!writeFallback(stringItem)) {\n        throw new Error(\"write() failed\");\n      }\n    });\n  });\n}\nfunction read() {\n  return rejectThrownErrors(() => {\n    if (originalNavigatorClipboardRead) {\n      debugLog(\"Using `navigator.clipboard.read()`.\");\n      return originalNavigatorClipboardRead();\n    }\n    return readText().then((text) => {\n      return [textToClipboardItem(text)];\n    });\n  });\n}\nexport {\n  ClipboardItemPolyfill as ClipboardItem,\n  read,\n  readText,\n  setDebugLog,\n  suppressWarnings,\n  write,\n  writeText\n};\n//# sourceMappingURL=clipboard-polyfill.es6.js.map\n","import * as Clipboard from 'clipboard-polyfill';\n\nexport async function copyTextToClipboard(text) {\n  await Clipboard.writeText(text);\n}\n","import { render } from \"./CopyToClipboard.vue?vue&type=template&id=421d1dba\"\nimport script from \"./CopyToClipboard.vue?vue&type=script&lang=js\"\nexport * from \"./CopyToClipboard.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./IPAddress.vue?vue&type=template&id=21432c84\"\nimport script from \"./IPAddress.vue?vue&type=script&lang=js\"\nexport * from \"./IPAddress.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\nimport BadgeStateFormatter from '@shell/components/formatter/BadgeStateFormatter';\n// import HarvesterMigrationState from './HarvesterMigrationState';\n\nexport default {\n  components: { BadgeStateFormatter },\n  props: {\n    value: {\n      type: String,\n      default: '',\n    },\n\n    row: {\n      type: Object,\n      required: true,\n    },\n\n    allNodeNetwork: {\n      type: Array,\n      default: () => {\n        return [];\n      },\n    },\n\n    allClusterNetwork: {\n      type: Array,\n      default: () => {\n        return [];\n      },\n    },\n  },\n\n  data() {\n    return { isMigrating: false };\n  },\n\n  computed: {\n    networkImpassability() {\n      const nodeName = this.row?.nodeName;\n      const nn = this.allNodeNetwork.find((N) => N.attachNodeName === nodeName);\n\n      return (\n        (!!nn?.message || !this.enableClusterNetwork) &&\n        this.row?.attachNetwork &&\n        this?.row?.actualState === 'Running'\n      );\n    },\n\n    enableClusterNetwork() {\n      const clusterNetwork = this.allClusterNetwork?.[0] || {};\n\n      return clusterNetwork?.enable;\n    },\n\n    warningMessage() {\n      const out = [];\n\n      if (this.networkImpassability && this.allClusterNetwork.length) {\n        out.push(\n          this.t('kubevirt.network.message.vlanInactive', { name: this.row.realAttachNodeName })\n        );\n      }\n\n      if (this.row.warningMessage?.pod) {\n        const pod = this.row.warningMessage.pod;\n\n        if (\n          pod.metadata?.state?.error &&\n          !/pod has unbound immediate PersistentVolumeClaims/.test(pod.metadata?.state?.message)\n        ) {\n          out.push(pod.metadata?.state?.message);\n        }\n      }\n\n      if (this.row?.actualState === 'VM error' && this.row.warningMessage?.message) {\n        out.push(this.row.warningMessage?.message);\n      }\n\n      if (this.row?.migrationMessage) {\n        out.push(this.row?.migrationMessage.message);\n      }\n\n      return out;\n    },\n  },\n\n  methods: {\n    migrationStateChanged(neu) {\n      if (neu === 'Failed') {\n        this.isMigrating = false;\n      } else {\n        this.isMigrating = !!neu;\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <span>\n    <!-- <HarvesterMigrationState v-show=\"isMigrating\" :vm-resource=\"row\" @state-changed=\"migrationStateChanged\" /> -->\n    <div v-show=\"!isMigrating\" class=\"state\">\n      <BadgeStateFormatter :row=\"row\" />\n      <VDropdown v-if=\"warningMessage.length\" trigger=\"hover\" offset=\"16\">\n        <span class=\"tooltip-target\">\n          <i class=\"icon icon-warning icon-lg text-warning\" />\n        </span>\n\n        <template #popover>\n          <p v-for=\"(message, index) in warningMessage\" :key=\"message\">\n            {{ index + 1 }}. {{ message }}\n          </p>\n        </template>\n      </VDropdown>\n    </div>\n  </span>\n</template>\n\n<style lang=\"scss\" scoped>\n.state {\n  display: flex;\n  justify-content: space-between;\n\n  .icon-warning {\n    margin-top: 2px;\n  }\n}\n</style>\n","import { render } from \"./VMState.vue?vue&type=template&id=c9f308c6&scoped=true\"\nimport script from \"./VMState.vue?vue&type=script&lang=js\"\nexport * from \"./VMState.vue?vue&type=script&lang=js\"\n\nimport \"./VMState.vue?vue&type=style&index=0&id=c9f308c6&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c9f308c6\"]])\n\nexport default __exports__","// Imports\nimport ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/noSourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".state[data-v-c9f308c6]{display:flex;justify-content:space-between}.state .icon-warning[data-v-c9f308c6]{margin-top:2px}\", \"\"]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-23.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-23.use[2]!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-23.use[3]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-23.use[4]!../../../node_modules/cache-loader/dist/cjs.js??ruleSet[0].use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./VMState.vue?vue&type=style&index=0&id=c9f308c6&lang=scss&scoped=true\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"40cef760\", content, true, {\"sourceMap\":false,\"shadowMode\":false});"],"names":["key","$options","showIP","_createElementBlock","_hoisted_1","_Fragment","_renderList","ips","ip","name","_createTextVNode","_toDisplayString","_createVNode","_component_CopyToClipboard","text","class","$props","col","dashIfEmpty","_hoisted_2","_cache","_createElementVNode","_createCommentVNode","_createBlock","_component_AsyncButton","_mergeProps","icon","showLabel","_ctx","$attrs","delay","onClick","clicked","TEXT_PLAIN","debugLogImpl","s","debugLog","warnOrLog","console","warn","log","apply","arguments","bind","_a","_b","_c","originalWindow","window","originalGlobalThis","globalThis","promiseConstructorImpl","Promise","getPromiseConstructor","Error","_a2","_a3","_a4","_a5","_a6","originalNavigator","navigator","originalNavigatorClipboard","clipboard","originalNavigatorClipboardWriteText","read","readText","write","writeText","promiseConstructor","ClipboardItem","ieWindow","seemToBeInIE","ClipboardEvent","clipboardData","setData","writeTextIE","success","copyListener","tracker","data","e","type","value","getData","preventDefault","execCopy","listener","this","document","addEventListener","execCommand","removeEventListener","copyUsingTempSelection","selectionSet","selectionClear","copyUsingTempElem","tempElem","createElement","setAttribute","textContent","body","appendChild","removeChild","copyTextUsingDOM","str","spanParent","attachShadow","mode","span","innerText","result","elem","sel","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","writeFallback","stringItem","hasTextPlain","userAgent","indexOf","resolve","rejectThrownErrors","executor","reject","stringToStringItem","catch","writeTextStringFallback","async","copyTextToClipboard","Clipboard","components","AsyncButton","props","String","required","Boolean","default","methods","buttonCb","then","__exports__","MANAGEMENT_NETWORK","CopyToClipboard","row","Object","computed","vmiIp","filter","sort","a","b","vmiResources","$store","getters","VMI_RESOURCE_NAME","resource","find","VMI","id","vmiNetworks","spec","networks","status","interfaces","intf","isIpv4","ipAddress","map","network","multus","networkName","pod","stateDisplay","OFF","render","_component_BadgeStateFormatter","warningMessage","length","_component_VDropdown","trigger","offset","popover","_withCtx","message","index","_","$data","isMigrating","BadgeStateFormatter","allNodeNetwork","Array","allClusterNetwork","networkImpassability","nodeName","nn","N","attachNodeName","enableClusterNetwork","attachNetwork","actualState","clusterNetwork","enable","out","push","t","realAttachNodeName","metadata","state","error","test","migrationMessage","migrationStateChanged","neu","___CSS_LOADER_EXPORT___","module","content","__esModule","locals","exports","add"],"sourceRoot":""}